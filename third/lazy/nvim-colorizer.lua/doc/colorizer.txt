*colorizer*    Requires Neovim >= 0.7.0 and `set termguicolors`

Highlights terminal CSI ANSI color codes.

Author: Ashkan Kiani <from-nvim-colorizer.lua@kiani.io>

==============================================================================
USAGE                                                          *colorizer-usage*

 Establish the autocmd to highlight all filetypes.

       `lua require("colorizer").setup()`

 Highlight using all css highlight modes in every filetype

       `lua require("colorizer").setup(user_default_options = { css = true })`

==============================================================================
USE WITH COMMANDS                                          *colorizer-commands*

   *:ColorizerAttachToBuffer*

       Attach to the current buffer and start continuously highlighting
       matched color names and codes.

       If the buffer was already attached(i.e. being highlighted), the
       settings will be reloaded. This is useful for reloading settings for
       just one buffer.

   *:ColorizerDetachFromBuffer*

       Stop highlighting the current buffer (detach).

   *:ColorizerReloadAllBuffers*

       Reload all buffers that are being highlighted currently.
       Calls ColorizerAttachToBuffer on every buffer.

   *:ColorizerToggle*
       Toggle highlighting of the current buffer.

USE WITH LUA

Attach
       Accepts buffer number (0 or nil for current) and an option
       table of user_default_options from `setup`.  Option table can be nil
       which defaults to setup options

       Attach to current buffer with local options >
	   require("colorizer").attach_to_buffer(0, {
	     mode = "background",
	     css = false,
	   })
<

       Attach to current buffer with setup options >
	   require("colorizer").attach_to_buffer(0, {
	     mode = "background",
	     css = false,
	   })
<

       Accepts an optional buffer number (0 or nil for current).  Defaults to
       current buffer.

Detach

       Detach to buffer with id 22 >
	   require("colorizer").attach_to_buffer(22)
<

       Detach from current buffer >
	   require("colorizer").detach_from_buffer(0)
	   require("colorizer").detach_from_buffer()
<

       Detach from buffer with id 22 >
	   require("colorizer").detach_from_buffer(22)
<

==============================================================================
LUA API                                                      *colorizer-lua-api*

Functions: ~
    |highlight_buffer| - Highlight the buffer region.

    |rehighlight| - Rehighlight the buffer if colorizer is active

    |is_buffer_attached| - Check if attached to a buffer

    |reload_all_buffers| - Reload all of the currently active highlighted
    buffers.

    |reload_on_save| - Reload file on save; used for dev, to edit expect.txt and
    apply highlights from returned setup table

    |attach_to_buffer| - Attach to a buffer and continuously highlight changes.

    |detach_from_buffer| - Stop highlighting the current buffer.

    |setup| - Easy to use function if you want the full setup without fine
    grained control.

    |clear_highlight_cache| - Clears the highlight cache and reloads all
    buffers.

Fields: ~
    |default_namespace| - Default namespace used in `colorizer.buffer.highlight`
    and `attach_to_buffer`.


highlight_buffer()                                  *colorizer.highlight_buffer*
    Highlight the buffer region.

    See also:~
	|colorizer.buffer.highlight|




							 *colorizer.rehighlight*
rehighlight({bufnr}, {options}, {options_local}, {use_local_lines})
    Rehighlight the buffer if colorizer is active

    Parameters: ~
	{bufnr} -  number: buffer number (0 for current)
	{options} -  table: Buffer options
	{options_local} -  table|nil: Buffer local variables
	{use_local_lines} -  boolean|nil Whether to use lines num range from
	options_local

    returns:~
	nil or boolean or number,table



is_buffer_attached({bufnr})                       *colorizer.is_buffer_attached*
    Check if attached to a buffer

    Parameters: ~
	{bufnr} -  number|nil: buffer number (0 for current)

    returns:~
	number: returns bufnr if attached, otherwise -1

    See also:~
	|colorizer.buffer.highlight|



reload_all_buffers()                              *colorizer.reload_all_buffers*
    Reload all of the currently active highlighted buffers.



reload_on_save({pattern})                             *colorizer.reload_on_save*
    Reload file on save; used for dev, to edit expect.txt and apply highlights
    from returned setup table

    Parameters: ~
	{pattern} -  string: pattern to match file name



attach_to_buffer({bufnr}, {options}, {bo_type})     *colorizer.attach_to_buffer*
    Attach to a buffer and continuously highlight changes.

    Parameters: ~
	{bufnr} -  number|nil: buffer number (0 for current)
	{options} -  table|nil: Configuration options as described in `setup`
	{bo_type} -  'buftype'|'filetype'|nil: The type of buffer option



detach_from_buffer({bufnr})                       *colorizer.detach_from_buffer*
    Stop highlighting the current buffer.

    Parameters: ~
	{bufnr} -  number|nil: buffer number (0 for current)



setup({opts})                                                  *colorizer.setup*
    Easy to use function if you want the full setup without fine grained
    control.

    Setup an autocmd which enables colorizing for the filetypes and options
    specified.

    By default highlights all FileTypes.

    Example config:~
>
      { filetypes = { "css", "html" }, user_default_options = { names = true } }
<
    Setup with all the default options:~
>
	require("colorizer").setup {
	  user_commands,
	  filetypes = { "*" },
	  user_default_options,
	  -- all the sub-options of filetypes apply to buftypes
	  buftypes = {},
	}
<
    Setup colorizer with user options


    Parameters: ~
	{opts} -  table|nil: User provided options

    See also:~
	|colorizer.config|

    Usage:~
	`require("colorizer").setup()`



clear_highlight_cache()                        *colorizer.clear_highlight_cache*
    Clears the highlight cache and reloads all buffers.



default_namespace                                  *colorizer.default_namespace*
    Default namespace used in `colorizer.buffer.highlight` and
    `attach_to_buffer`.
	    <a class="type"
	    href="https://www.lua.org/manual/5.1/manual.html#5.4">string</a>
	{:} -  default_namespace

    See also:~
	|colorizer.buffer.default_namespace|



==============================================================================
BUFFER                                           *colorizer.buffer-introduction*

Provides highlighting functions for buffer


==============================================================================
LUA API                                               *colorizer.buffer-lua-api*

Functions: ~
    |clear_hl_cache| - Clean the highlight cache

    |add_highlight| - Create highlight and set highlights

    |highlight| - Highlight the buffer region.

    |parse_lines| - Parse the given lines for colors and return a table
    containing
 rgb_hex and range per line

Tables: ~
    |highlight_mode_names| - Highlight mode which will be use to render the
    color

Fields: ~
    |default_namespace| - Default namespace used in `highlight` and
    `colorizer.attach_to_buffer`.


clear_hl_cache()                               *colorizer.buffer.clear_hl_cache*
    Clean the highlight cache




						*colorizer.buffer.add_highlight*
add_highlight({bufnr}, {ns_id}, {line_start}, {line_end}, {data}, {options})
    Create highlight and set highlights

    Parameters: ~
	{bufnr} -  number: buffer number (0 for current)
	{ns_id} -  number: namespace id.  default is "colorizer", created with
	vim.api.nvim_create_namespace
	{line_start} -  number: line_start should be 0-indexed
	{line_end} -  number: Last line to highlight
	{data} -  table: table output of `parse_lines`
	{options} -  table: Passed in setup, mainly for `user_default_options`




						    *colorizer.buffer.highlight*
highlight({bufnr}, {ns_id}, {line_start}, {line_end}, {options},
{options_local})
    Highlight the buffer region.

     Highlight starting from `line_start` (0-indexed) for each line described by
     `lines` in the
     buffer id `bufnr` and attach it to the namespace id `ns_id`.


    Parameters: ~
	{bufnr} -  number: Buffer number, 0 for current
	{ns_id} -  number: Namespace id, default is "colorizer" created with
	vim.api.nvim_create_namespace
	{line_start} -  number: line_start should be 0-indexed
	{line_end} -  number: Last line to highlight
	{options} -  table: Configuration options as described in `setup`
	{options_local} -  table: Buffer local variables

    returns:~
	nil or boolean or number,table




						  *colorizer.buffer.parse_lines*
parse_lines({bufnr}, {lines}, {line_start}, {options})
    Parse the given lines for colors and return a table containing
     rgb_hex and range per line

    Parameters: ~
	{bufnr} -  number: Buffer number (0 for current)
	{lines} -  table: Table of lines to parse
	{line_start} -  number: This is the buffer line number, from where to
	start highlighting
	{options} -  table: Passed in `colorizer.setup`, Only uses
	`user_default_options`

    returns:~
	table or nil



highlight_mode_names                     *colorizer.buffer.highlight_mode_names*
    Highlight mode which will be use to render the color

    Fields: ~
	{background} -
	{foreground} -
	{virtualtext} -



default_namespace                           *colorizer.buffer.default_namespace*
    Default namespace used in `highlight` and `colorizer.attach_to_buffer`.

    See also:~
	|highlight|
	|colorizer.attach_to_buffer|



==============================================================================
COLOR                                             *colorizer.color-introduction*

Provides color conversion and utility functions for RGB and HSL values.


==============================================================================
LUA API                                                *colorizer.color-lua-api*

Functions: ~
    |hsl_to_rgb| - Converts an HSL color value to RGB.

    |hue_to_rgb| - Converts an HSL component to RGB, used within `hsl_to_rgb`.

    |is_bright| - Determines whether a color is bright, helping decide text
    color.


hsl_to_rgb({h}, {s}, {l})                           *colorizer.color.hsl_to_rgb*
    Converts an HSL color value to RGB.

     Accepts hue, saturation, and lightness values, each within the range [0,
     1],
     and converts them to an RGB color representation with values scaled to [0,
     255].


    Parameters: ~
	{h} -  number: Hue, in the range [0, 1].
	{s} -  number: Saturation, in the range [0, 1].
	{l} -  number: Lightness, in the range [0, 1].

    returns:~
	number or nil,number or nil,number or nil: Returns red, green, and blue
	values
	 scaled to [0, 255], or nil if any input value is out of range.
	number or nil,number or nil,number or nil



hue_to_rgb({p}, {q}, {t})                           *colorizer.color.hue_to_rgb*
    Converts an HSL component to RGB, used within `hsl_to_rgb`.

     Source: https://gist.github.com/mjackson/5311256
     This function computes one component of the RGB value by adjusting
     the color based on intermediate values `p`, `q`, and `t`.


    Parameters: ~
	{p} -  number: A helper variable representing part of the lightness
	scale.
	{q} -  number: Another helper variable based on saturation and
	lightness.
	{t} -  number: Adjusted hue component to be converted to RGB.

    returns:~
	number: The RGB component value, in the range [0, 1].



is_bright({r}, {g}, {b})                             *colorizer.color.is_bright*
    Determines whether a color is bright, helping decide text color.

     ref: https://stackoverflow.com/a/1855903/837964
     https://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color
     Calculates the perceived luminance of the RGB color. Returns `true` if
     the color is bright enough to warrant black text and `false` otherwise.
     Formula based on the human eye’s sensitivity to different colors.


    Parameters: ~
	{r} -  number: Red component, in the range [0, 255].
	{g} -  number: Green component, in the range [0, 255].
	{b} -  number: Blue component, in the range [0, 255].

    returns:~
	boolean: `true` if the color is bright, `false` if it's dark.



==============================================================================
CONFIG                                           *colorizer.config-introduction*

Provides configuration options and utilities for setting up colorizer.


==============================================================================
LUA API                                               *colorizer.config-lua-api*

Functions: ~
    |get_settings| - Initializes colorizer with user-provided options.

    |new_buffer_options| - Retrieve default options or buffer-specific options.

    |get_options| - Retrieve options based on buffer type and file type.

    |set_bo_value| - Set options for a specific buffer or file type.

    |parse_buffer_options| - Parse buffer Configuration and convert aliases to
    normal values

Tables: ~
    |user_default_options| - Default user options for colorizer.

    |setup_options| - Options for colorizer that were passed in to setup
    function

    |default_options| - Plugin default options cache from vim.deepcopy

    |opts| - Configuration options for the `setup` function.


get_settings({opts})                             *colorizer.config.get_settings*
    Initializes colorizer with user-provided options.

     Merges default settings with any user-specified options, setting up
     `filetypes`,
     `user_default_options`, and `user_commands`.


    Parameters: ~
	{opts} -  opts User-provided configuration options.

    returns:~
	table Final settings after merging user and default options.



new_buffer_options({bufnr}, {bo_type})     *colorizer.config.new_buffer_options*
    Retrieve default options or buffer-specific options.

    Parameters: ~
	{bufnr} -  number: The buffer number.
	{bo_type} -  'buftype'|'filetype': The type of buffer option



get_options({bo_type}, {buftype}, {filetype})     *colorizer.config.get_options*
    Retrieve options based on buffer type and file type.
      Prefer filetype.


    Parameters: ~
	{bo_type} -  'buftype'|'filetype': The type of buffer option
	{buftype} -  string: Buffer type.
	{filetype} -  string: File type.

    returns:~
	table



set_bo_value({bo_type}, {value}, {options})      *colorizer.config.set_bo_value*
    Set options for a specific buffer or file type.

    Parameters: ~
	{bo_type} -  'buftype'|'filetype': The type of buffer option
	{value} -  string: The specific value to set.
	{options} -  table: Options to associate with the value.



parse_buffer_options({options})          *colorizer.config.parse_buffer_options*
    Parse buffer Configuration and convert aliases to normal values

    Parameters: ~
	{options} -  table: options table

    returns:~
	table



user_default_options                     *colorizer.config.user_default_options*
    Default user options for colorizer.

     This table defines individual options and alias options, allowing
     configuration of
     colorizer's behavior for different color formats (e.g., `#RGB`, `#RRGGBB`,
     `#AARRGGBB`, etc.).

     **Individual Options**: Options like `names`, `RGB`, `RRGGBB`, `RRGGBBAA`,
     `hsl_fn`, `rgb_fn`,
     `AARRGGBB`, `tailwind`, and `sass` can be enabled or disabled
     independently.

     **Alias Options**: `css` and `css_fn` enable multiple options at once.
       - `css_fn = true` enables `hsl_fn` and `rgb_fn`.
       - `css = true` enables `names`, `RGB`, `RRGGBB`, `RRGGBBAA`, `hsl_fn`,
	 and `rgb_fn`.

     **Option Priority**: Individual options have higher priority than aliases.
     If both `css` and `css_fn` are true, `css_fn` has more priority over `css`.


    Fields: ~
	{RGB} -  boolean: Enables `#RGB` hex codes.
	{RRGGBB} -  boolean: Enables `#RRGGBB` hex codes.
	{names} -  boolean: Enables named colors (e.g., "Blue").
	{RRGGBBAA} -  boolean: Enables `#RRGGBBAA` hex codes.
	{AARRGGBB} -  boolean: Enables `0xAARRGGBB` hex codes.
	{rgb_fn} -  boolean: Enables CSS `rgb()` and `rgba()` functions.
	{hsl_fn} -  boolean: Enables CSS `hsl()` and `hsla()` functions.
	{css} -  boolean: Enables all CSS features (`rgb_fn`, `hsl_fn`, `names`,
	`RGB`, `RRGGBB`).
	{css_fn} -  boolean: Enables all CSS functions (`rgb_fn`, `hsl_fn`).
	{mode} -  'background'|'foreground'|'virtualtext': Display mode
	{tailwind} -  boolean|string: Enables Tailwind CSS colors (e.g.,
	`"normal"`, `"lsp"`, `"both"`).
	{sass} -  table: Sass color configuration (`enable` flag and `parsers`).
	{virtualtext} -  string: Character used for virtual text display.
	{virtualtext_inline} -  boolean: Shows virtual text inline with color.
	{virtualtext_mode} -  'background'|'foreground': Mode for virtual text
	display.
	{always_update} -  boolean: Always update color values, even if buffer
	is not focused.



setup_options                                   *colorizer.config.setup_options*
    Options for colorizer that were passed in to setup function

    Fields: ~
	{exclusions} -  table
	{all} -  table
	{default_options} -  table
	{user_commands} -  boolean
	{filetypes} -  table
	{buftypes} -  table



default_options                               *colorizer.config.default_options*
    Plugin default options cache from vim.deepcopy



opts                                                     *colorizer.config.opts*
    Configuration options for the `setup` function.

    Fields: ~
	{filetypes} -  table A list of file types where colorizer should be
	enabled. Use `"*"` for all file types.
	{user_default_options} -  table Default options for color handling.
   - `RGB` (boolean): Enables support for `#RGB` hex codes.
   - `RRGGBB` (boolean): Enables support for `#RRGGBB` hex codes.
   - `names` (boolean): Enables named color codes like `"Blue"`.
   - `RRGGBBAA` (boolean): Enables support for `#RRGGBBAA` hex codes.
   - `AARRGGBB` (boolean): Enables support for `0xAARRGGBB` hex codes.
   - `rgb_fn` (boolean): Enables CSS `rgb()` and `rgba()` functions.
   - `hsl_fn` (boolean): Enables CSS `hsl()` and `hsla()` functions.
   - `css` (boolean): Enables all CSS-related features (e.g., `names`, `RGB`,
     `RRGGBB`, `hsl_fn`, `rgb_fn`).
   - `css_fn` (boolean): Enables all CSS function-related features (e.g.,
     `rgb_fn`, `hsl_fn`).
   - `mode` (string): Determines the display mode for highlights. Options are
     `"background"`, `"foreground"`, and `"virtualtext"`.
   - `tailwind` (boolean|string): Enables Tailwind CSS colors. Accepts `true`,
     `"normal"`, `"lsp"`, or `"both"`.
   - `sass` (table): Configures Sass color support.
      - `enable` (boolean): Enables Sass color parsing.
      - `parsers` (table): A list of parsers to use, typically includes `"css"`.
   - `virtualtext` (string): Character used for virtual text display of colors
     (default is `"■"`).
   - `virtualtext_inline` (boolean): If true, shows the virtual text inline with
     the color.
 - `virtualtext_mode` ('background'|'foreground'): Determines the display mode
   for virtual text.
   - `always_update` (boolean): If true, updates color values even if the buffer
     is not focused.
	{buftypes} -  table|nil Optional. A list of buffer types where colorizer
	should be enabled. Defaults to all buffer types if not provided.
	{user_commands} -  boolean|table If true, enables all user commands for
	colorizer. If `false`, disables user commands. Alternatively, provide a
	table of specific commands to enable:
   - `"ColorizerAttachToBuffer"`
   - `"ColorizerDetachFromBuffer"`
   - `"ColorizerReloadAllBuffers"`
   - `"ColorizerToggle"`



==============================================================================
MATCHER                                         *colorizer.matcher-introduction*

Manages matching and parsing of color patterns in buffers.

 This module provides functions for setting up and applying color parsers
 for different color formats such as RGB, HSL, hexadecimal, and named colors.
 It uses a trie-based structure to optimize prefix-based parsing.

==============================================================================
LUA API                                              *colorizer.matcher-lua-api*

Functions: ~
    |make| - Parse the given options and return a function with enabled parsers.


make({options})                                         *colorizer.matcher.make*
    Parse the given options and return a function with enabled parsers.

    if no parsers enabled then return false
    Do not try make the function again if it is present in the cache


    Parameters: ~
	{options} -  table: options created in `colorizer.setup`

    returns:~
	function or boolean: function which will just parse the line for enabled
	parsers



==============================================================================
HSL                                          *colorizer.parser.hsl-introduction*

This module provides a parser for identifying and converting `hsl()` and
`hsla()` CSS functions to RGB hexadecimal format.

 It supports various CSS color value formats, including degrees (`deg`), turns
 (`turn`), percentages, and alpha transparency.
 This function is useful for syntax highlighting or color recognition in a text
 editor.

==============================================================================
LUA API                                           *colorizer.parser.hsl-lua-api*

Functions: ~
    |hsl_function_parser| - Parses `hsl()` and `hsla()` CSS functions and
    converts them to RGB hexadecimal format.



				      *colorizer.parser.hsl.hsl_function_parser*
hsl_function_parser({line}, {i}, {opts})
    Parses `hsl()` and `hsla()` CSS functions and converts them to RGB
    hexadecimal format.

     This function matches `hsl()` or `hsla()` functions within a line of text,
     extracting and converting the hue, saturation, and luminance
     to an RGB color. It handles angles in degrees and turns, percentages, and
     an optional alpha (transparency) value.


    Parameters: ~
	{line} -  string The line of text to parse
	{i} -  number The starting index within the line where parsing should
	begin
	{opts} -  table Parsing options, including:
   - `prefix` (string): "hsl" or "hsla" to specify the CSS function type.

    returns:~
	number or nil The end index of the parsed `hsl/hsla` function within the
	line, or `nil` if no match was found.
	string or nil The RGB hexadecimal color (e.g., "ff0000" for red), or
	`nil` if parsing failed



==============================================================================
NAMES                                      *colorizer.parser.names-introduction*

This module provides a parser that identifies named colors from a given line of
text.

 It supports standard color names and optional Tailwind CSS color names.
 The module creates a lookup table and Trie structure to efficiently match color
 names in text.

==============================================================================
LUA API                                         *colorizer.parser.names-lua-api*

Functions: ~
    |name_parser| - Grab all the color values from `vim.api.nvim_get_color_map`
    and create a lookup table.


name_parser({line}, {i}, {opts})            *colorizer.parser.names.name_parser*
    Grab all the color values from `vim.api.nvim_get_color_map` and create a
    lookup table.

     color_map is used to store the color values


    Parameters: ~
	{line} -  string: Line to parse
	{i} -  number: Index of line from where to start parsing
	{opts} -  table: Currently contains whether tailwind is enabled or not



==============================================================================
RGBA_HEX                                *colorizer.parser.rgba_hex-introduction*

This module provides a parser for identifying and converting `#RRGGBBAA`
hexadecimal color values to RGB hexadecimal format.

 It is commonly used in Android apps for colors with an alpha (transparency)
 component.
 The function reads the color, applies the alpha to each RGB channel, and
 returns the resulting RGB hex string.

==============================================================================
LUA API                                      *colorizer.parser.rgba_hex-lua-api*

Functions: ~
    |rgba_hex_parser| - Parses `#RRGGBBAA` hexadecimal colors and converts them
    to RGB hex format.


rgba_hex_parser({line}, {i}, {opts}) *colorizer.parser.rgba_hex.rgba_hex_parser*
    Parses `#RRGGBBAA` hexadecimal colors and converts them to RGB hex format.

     This function matches `#RRGGBBAA` format colors within a line, handling
     alpha transparency if specified.
     It checks the length of the color string to match expected valid lengths
     (e.g., 4, 7, 9 characters).


    Parameters: ~
	{line} -  string The line of text to parse for the hex color
	{i} -  number The starting index within the line where parsing should
	begin
	{opts} -  table Options containing:
   - `minlen` (number): Minimum length of the color string
   - `maxlen` (number): Maximum length of the color string
   - `valid_lengths` (table): Set of valid lengths (e.g., `{4, 7, 9}`)

    returns:~
	number or nil The end index of the parsed hex color within the line, or
	`nil` if parsing failed
	string or nil The RGB hexadecimal color (e.g., "ff0000" for red), or
	`nil` if parsing failed



==============================================================================
RGB_HEX                                  *colorizer.parser.rgb_hex-introduction*

This module provides a parser for extracting `0xAARRGGBB` hexadecimal color
values and converting them to RGB hex.

 This format is commonly used in Android apps for color values, where the color
 includes an alpha (transparency) component.
 The function parses the color, applies the alpha value to each RGB channel, and
 returns the resulting RGB hex string.

==============================================================================
LUA API                                       *colorizer.parser.rgb_hex-lua-api*

Functions: ~
    |argb_hex_parser| - Parses a `0xAARRGGBB` formatted hexadecimal color and
    converts it to an RGB hex value.


argb_hex_parser({line}, {i})          *colorizer.parser.rgb_hex.argb_hex_parser*
    Parses a `0xAARRGGBB` formatted hexadecimal color and converts it to an RGB
    hex value.

     This function reads a color from a line of text, expecting it in the
     `0xAARRGGBB` format (common in Android apps).
     It extracts the alpha (AA), red (RR), green (GG), and blue (BB) components,
     applies the alpha to the RGB channels, and outputs
     the resulting RGB color in hexadecimal format.


    Parameters: ~
	{line} -  string The line of text to parse
	{i} -  number The starting index within the line where parsing should
	begin

    returns:~
	number or nil The end index of the parsed hex value within the line, or
	`nil` if parsing failed
	string or nil The RGB hexadecimal color (e.g., "ff0000" for red), or
	`nil` if parsing failed



==============================================================================
RGB                                          *colorizer.parser.rgb-introduction*

This module provides a parser for identifying and converting `rgb()` and
`rgba()` CSS functions to RGB hexadecimal format.

 It supports decimal and percentage values for RGB channels, as well as an
 optional alpha (transparency) component.
 The function can interpret a variety of CSS syntax variations, making it useful
 for syntax highlighting or color parsing.

==============================================================================
LUA API                                           *colorizer.parser.rgb-lua-api*

Functions: ~
    |rgb_function_parser| - Parses `rgb()` and `rgba()` CSS functions and
    converts them to RGB hexadecimal format.



				      *colorizer.parser.rgb.rgb_function_parser*
rgb_function_parser({line}, {i}, {opts})
    Parses `rgb()` and `rgba()` CSS functions and converts them to RGB
    hexadecimal format.

     This function matches `rgb()` or `rgba()` functions in a line of text,
     extracting RGB and optional alpha values.
     It supports decimal and percentage formats, alpha transparency, and comma
     or space-separated CSS syntax.


    Parameters: ~
	{line} -  string The line of text to parse for the color function
	{i} -  number The starting index within the line where parsing should
	begin
	{opts} -  table Parsing options, including:
   - `prefix` (string): "rgb" or "rgba" to specify the CSS function type

    returns:~
	number or nil The end index of the parsed `rgb/rgba` function within the
	line, or `nil` if parsing failed
	string or nil The RGB hexadecimal color (e.g., "ff0000" for red), or
	`nil` if parsing failed



==============================================================================
SASS                                               *colorizer.sass-introduction*

Manages Sass variable parsing and color detection for buffers.

 This module handles the parsing of Sass color variables, managing import
 statements,
 and watching files for updates to Sass variable definitions.
 It supports recursive Sass imports, resolving color values for each variable,
 and caching color definitions.

==============================================================================
LUA API                                                 *colorizer.sass-lua-api*

Functions: ~
    |cleanup| - Cleanup sass variables and watch handlers

    |name_parser| - Parse the given line for sass color names
 check for value in state[buf].definitions_all

    |update_variables| - Parse the given lines for sass variabled and add to
    `SASS[buf].DEFINITIONS_ALL`.


cleanup({bufnr})                                        *colorizer.sass.cleanup*
    Cleanup sass variables and watch handlers

    Parameters: ~
	{bufnr} -  number



name_parser({line}, {i}, {bufnr})                   *colorizer.sass.name_parser*
    Parse the given line for sass color names
     check for value in state[buf].definitions_all

    Parameters: ~
	{line} -  string: Line to parse
	{i} -  number: Index of line from where to start parsing
	{bufnr} -  number: Buffer number

    returns:~
	number or nil, string or nil




					       *colorizer.sass.update_variables*
update_variables({bufnr}, {line_start}, {line_end}, {lines}, {color_parser},
{options}, {options_local})
    Parse the given lines for sass variabled and add to
    `SASS[buf].DEFINITIONS_ALL`.

     which is then used in |sass_name_parser|
     If lines are not given, then fetch the lines with line_start and line_end


    Parameters: ~
	{bufnr} -  number: Buffer number
	{line_start} -  number
	{line_end} -  number
	{lines} -  table|nil
	{color_parser} -  function|boolean
	{options} -  table: Buffer options
	{options_local} -  table|nil: Buffer local variables



==============================================================================
TAILWIND                                       *colorizer.tailwind-introduction*

Handles Tailwind CSS color highlighting within buffers.

 This module integrates with the Tailwind CSS Language Server Protocol (LSP) to
 retrieve and apply
 color highlights for Tailwind classes in a buffer. It manages LSP attachment,
 autocmds for color updates,
 and maintains state for efficient Tailwind highlighting.

==============================================================================
LUA API                                             *colorizer.tailwind-lua-api*

Functions: ~
    |cleanup| - Cleanup tailwind variables and autocmd

    |setup_lsp_colors| - highlight buffer using values returned by tailwindcss
 To see these table information, see |colorizer.buffer|


cleanup({bufnr})                                    *colorizer.tailwind.cleanup*
    Cleanup tailwind variables and autocmd

    Parameters: ~
	{bufnr} -  number: buffer number (0 for current)




					   *colorizer.tailwind.setup_lsp_colors*
setup_lsp_colors({bufnr}, {options}, {options_local}, {add_highlight})
    highlight buffer using values returned by tailwindcss
     To see these table information, see |colorizer.buffer|

    Parameters: ~
	{bufnr} -  number: Buffer number (0 for current)
	{options} -  table
	{options_local} -  table
	{add_highlight} -  function



==============================================================================
TRIE                                               *colorizer.trie-introduction*

Trie implementation in luajit.

 This module provides a Trie data structure implemented in LuaJIT with efficient
 memory handling.
 It supports operations such as inserting, searching, finding the longest
 prefix, and converting the Trie into a table format.
 The implementation uses LuaJIT's Foreign Function Interface (FFI) for optimized
 memory allocation.


==============================================================================
USERCMDS                                       *colorizer.usercmds-introduction*

This module provides functions for creating user commands for the Colorizer
plugin in Neovim.

 It allows the creation of commands to attach, detach, reload, and toggle the
 Colorizer functionality on buffers.

==============================================================================
LUA API                                             *colorizer.usercmds-lua-api*

Functions: ~
    |make| - Create user commands for Colorizer based on the given command list.


make({cmds})                                           *colorizer.usercmds.make*
    Create user commands for Colorizer based on the given command list.

     This function defines and registers Colorizer commands based on the
     provided list.
     Available commands are:
     - `ColorizerAttachToBuffer`: Attaches Colorizer to the current buffer
     - `ColorizerDetachFromBuffer`: Detaches Colorizer from the current buffer
     - `ColorizerReloadAllBuffers`: Reloads Colorizer for all buffers
     - `ColorizerToggle`: Toggles Colorizer attachment to the buffer


    Parameters: ~
	{cmds} -  table|boolean A list of command names to create or `true` to
	create all available commands



==============================================================================
UTILS                                             *colorizer.utils-introduction*

Provides utility functions for color handling and file operations.

 This module contains helper functions for checking byte categories, merging
 tables,
 parsing colors, managing file watchers, and handling buffer lines.

==============================================================================
LUA API                                                *colorizer.utils-lua-api*

Functions: ~
    |byte_is_alphanumeric| - Checks if a byte represents an alphanumeric
    character.

    |byte_is_hex| - Checks if a byte represents a hexadecimal character.

    |byte_is_valid_colorchar| - Checks if a byte is valid as a color character
    (alphanumeric or `-` for Tailwind colors).

    |count| - Count the number of character in a string

    |get_last_modified| - Get last modified time of a file

    |merge| - Merge two tables.

    |parse_hex| - Parses a hexadecimal byte.

    |watch_file| - Watch a file for changes and execute callback

    |bufme| - Validates and returns a buffer number.


byte_is_alphanumeric({byte})              *colorizer.utils.byte_is_alphanumeric*
    Checks if a byte represents an alphanumeric character.

    Parameters: ~
	{byte} -  number The byte to check.

    returns:~
	boolean `true` if the byte is alphanumeric, otherwise `false`.



byte_is_hex({byte})                                *colorizer.utils.byte_is_hex*
    Checks if a byte represents a hexadecimal character.

    Parameters: ~
	{byte} -  number The byte to check.

    returns:~
	boolean `true` if the byte is hexadecimal, otherwise `false`.



byte_is_valid_colorchar({byte})        *colorizer.utils.byte_is_valid_colorchar*
    Checks if a byte is valid as a color character (alphanumeric or `-` for
    Tailwind colors).

    Parameters: ~
	{byte} -  number The byte to check.

    returns:~
	boolean `true` if the byte is valid, otherwise `false`.



count({str}, {pattern})                                  *colorizer.utils.count*
    Count the number of character in a string

    Parameters: ~
	{str} -  string
	{pattern} -  string

    returns:~
	number



get_last_modified({path})                    *colorizer.utils.get_last_modified*
    Get last modified time of a file

    Parameters: ~
	{path} -  string: file path

    returns:~
	number or nil: modified time



merge({...})                                             *colorizer.utils.merge*
    Merge two tables.

     todo: Remove this and use `vim.tbl_deep_extend`


    Parameters: ~
	{...} -

    returns:~
	table



parse_hex({byte})                                    *colorizer.utils.parse_hex*
    Parses a hexadecimal byte.

    Parameters: ~
	{byte} -  number The byte to parse.

    returns:~
	number The parsed hexadecimal value of the byte.



watch_file({path}, {callback}, {...})               *colorizer.utils.watch_file*
    Watch a file for changes and execute callback

    Parameters: ~
	{path} -  string: File path
	{callback} -  function: Callback to execute
	{...} -  table: params for callback

    returns:~
	uv_fs_event_t or nil



bufme({bufnr})                                           *colorizer.utils.bufme*
    Validates and returns a buffer number.

     If the provided buffer number is invalid, defaults to the current buffer.


    Parameters: ~
	{bufnr} -  number|nil: The buffer number to validate.

    returns:~
	number The validated buffer number.



vim:tw=80:ts=8:noet:ft=help:norl:
